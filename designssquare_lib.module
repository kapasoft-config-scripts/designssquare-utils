<?php

//to include artifacts from theme scope
//i.e._theme_include('bazar','/includes/template_api.inc');
function theme_include($theme, $path)
{
    static $themes = array();
    if (!isset($themes[$theme])) {
        $themes[$theme] = drupal_get_path('theme', $theme);
    }
    if ($themes[$theme] && ($file = DRUPAL_ROOT . '/' . $themes[$theme] . '/' . $path) && file_exists($file)) {
        include_once $file;
    }
}


function get_field_name_from_vocabulary($vocabulary_name, $entity_type = NULL)
{
    foreach (field_info_fields() as $field_name => $field) {
        if ($field['type'] == "taxonomy_term_reference" && $field['settings']['allowed_values'][0]['vocabulary'] == $vocabulary_name) {
            // Add this field to the return array if no entity type was specified or
            // if the specified type exists in the field's bundles array.
//            if (empty($entity_type) || in_array($entity_type, array_keys($field['bundles']))) {
//                $fields[$field_name] = $field;
//            }
            return $field_name;
        }
    }

}

//returns all the bundles of entity instances that references a field instance with a given type
function get_bundles_for_field_type($field_type)
{
    $field_map = field_info_field_map();
    $bundles = array();
    foreach ($field_map as $field_name => $item) {
        if ($item['type'] == $field_type) {
            foreach ($item['bundles'] as $bundle_list) {
                foreach ($bundle_list as $bundle) {
                    $bundles[] = $bundle;
                }
            }
        }
    }

    return array_unique($bundles);
}

function get_referencing_product_display_id($product)
{
    global $language;

    if (isset($product->display_id)) {
        return $product->display_id;
    } else {
        // Iterate through fields which refer to products.
        foreach (commerce_info_fields('commerce_product_reference') as $field) {
            // Build query.
            $query = new EntityFieldQuery;
            $query->entityCondition('entity_type', 'node', '=')
                ->fieldCondition($field['field_name'], 'product_id', $product->product_id, '=')
//            ->propertyCondition('language', $language->language, '=')
                ->range(0, 1);

            if ($result = $query->execute()) {
                // Return node id.
                $node = $result['node'];
                $node_keys = array_keys($node);
                return array_shift($node_keys);
            }
        }
    }

    return false;
}

//includes blocks in current scope(i.e html, node,etc) and places them in $region['block_id'] variable
function include_blocks(&$vars, $scope = 'page')
{
    $all_blocks = array();
    $ctx_blocks = array();
    $blocks = array();
    //retrieve context plugin as alternative for managing blocks
    $ctx_plugin = (module_exists('context')) ? context_get_plugin('reaction', 'block') : '';

    foreach (system_region_list($GLOBALS['theme']) as $region_key => $region_name) {

        if (block_get_blocks_by_region($region_key)) {
            $blocks = block_get_blocks_by_region($region_key);
        }

        if (!empty($ctx_plugin) && ($region_key !== 'content')) {
            if ($scope == 'html') {
                //blocks not build in html scope, so we build it manually
                $region_blocks = $ctx_plugin->block_list($region_key);
                $ctx_blocks = _block_get_renderable_array(_block_render_blocks($region_blocks));
            } else {
                $ctx_blocks = $ctx_plugin->block_get_blocks_by_region($region_key);
            }
        }

        $all_blocks = array_merge($blocks, $ctx_blocks);

        //sort the blocks merged
        $all_blocks['#sorted'] = FALSE;

        //maintain weights
        foreach ($all_blocks as &$block) {
            if (isset($block['#block']->weight)) {
                $block['#weight'] = $block['#block']->weight;
            }
        }

        // add it to the $region variable
        $vars['region'][$region_key] = (isset($all_blocks) && !empty($all_blocks)) ? $all_blocks : array();

        //reset arrays
        $all_blocks = array();
        $blocks = array();
        $ctx_blocks = array();
    }
}


function include_blocks_from_region($region_key, &$vars)
{
    $all_blocks = array();
    //making blocks available
    //retrieve context plugin as alternative for managing blocks
    $ctx_plugin = (module_exists('context')) ? context_get_plugin('reaction', 'block') : '';
//    foreach (system_region_list($GLOBALS['theme']) as $region_key => $region_name) {
    if (block_get_blocks_by_region($region_key)) {
        $blocks = block_get_blocks_by_region($region_key);
    }
    if (!empty($ctx_plugin)) {
        $ctx_blocks = $ctx_plugin->block_get_blocks_by_region($region_key);
    }

    if (isset($ctx_blocks) && isset($blocks)) {
        //there are blocks from the context as well from blocks module
        $all_blocks = array_merge($blocks, $ctx_blocks);

        //sort the blocks merged
        $all_blocks['#sorted'] = FALSE;

        //maintain weights
        foreach ($all_blocks as &$block) {
            if (isset($block['#block']->weight)) {
                $block['#weight'] = $block['#block']->weight;
            }
        }

    } elseif (isset($ctx_blocks)) {
        $all_blocks = $ctx_blocks;
    } elseif (isset($blocks)) {
        $all_blocks = $blocks;
    }

    // Get the content for each region and add it to the $region variable
    $vars['region'][$region_key] = (isset($all_blocks) && !empty($all_blocks)) ? $all_blocks : array();
//    }
}

//determines if current taxonomy term is part of commerce_product
function is_product_taxonomy()
{
    if (arg(0) == 'taxonomy') {
        //taxonomy
        $tid = arg(2);
        $term = taxonomy_term_load($tid);
        //retrieve all fields and filter for the particular taxonomy loaded
        foreach (field_info_field_map() as $field_name => $field) {
            if ($field['type'] == "taxonomy_term_reference" && $field_name == 'field_' . $term->vocabulary_machine_name && array_key_exists('commerce_product', $field['bundles'])) {
                return true;
            }
        }
    } else {
        //not a taxonomy term
        return false;
    }
}

//returns appropriate template file. It first check it there is one in the theme scope, then it looks in the modules
function get_template_path($module_name, $template_name)
{
    $path_to_theme_templates = path_to_theme() . '/templates';
    $path_to_widget_templates = drupal_get_path('module', $module_name) . '/templates';

    if (file_exists($path_to_theme_templates . '/' . $template_name . '.tpl.php')) {
        return $path_to_theme_templates;
    } else {
        return $path_to_widget_templates;
    }
}

//moves blocks from one sidebar to another depending on the taxonomy specified to left, right or none
function move_blocks_for_sidebars(&$context, $term_id_of_sidebar)
{
    $post_sidebar = taxonomy_term_load($term_id_of_sidebar);

    if ((isset($post_sidebar->name)) && ($post_sidebar->name == 'right' || $post_sidebar->name == 'left')) {
        $sidebar_pos = _get_sidebar_pos($post_sidebar->name);
        foreach ($context->reactions['block']['blocks'] as $key => $block) {
            if ($block['region'] == $sidebar_pos['from']) {
                //move sidebar to another side
                $context->reactions['block']['blocks'][$key]['region'] = $sidebar_pos['to'];
            }
        }
    } elseif ((isset($post_sidebar->name)) && $post_sidebar->name == 'none') {
        foreach ($context->reactions['block']['blocks'] as $key => $block) {
            if ($block['region'] == 'sidebar_first' || $block['region'] == 'sidebar_second') {
                //remove any sidebar content
                unset($context->reactions['block']['blocks'][$key]);
            }
        }
    }
}

//retrieve currently loaded node from content cache
//@return stdClass of the Node or Null if no node set in the content cache
function get_node_from_cache()
{
    //get the current content from cache
    $content = get_content_from_cache();

    //retrieve current node being loaded
//    $current_node = array_slice($content['system_main']['nodes'],0,1);
    $current_node = null;
    if ($content) {
        //cache is set
        $node_wrap = (isset($content['nodes'])) ? array_slice($content['nodes'], 0, 1) : null;
        $current_node = (isset($node_wrap) && !empty($node_wrap)) ? array_values($node_wrap)[0]['#node'] : null;
    } else {
        //cache not set, lets try to load from path
        if ((arg(0) == 'node') && arg(1) && is_numeric(arg(1))) {
            $current_node = node_load(arg(1));
        }
    }

    return $current_node;
}

function get_content_from_cache(){
    //get the current content from cache
    $content = drupal_set_page_content();
    //indicate that you are not adding content but just reading it by setting static variable 'system...added' to False
    $system_main_content_added = & drupal_static('system_main_content_added');
    $system_main_content_added = FALSE;
    return $content;
}

//adding templates to the themes scope. It is assumed that all template files are stored in folder named "templates"
function add_templates($module, &$theme_registry)
{
    //make local templates available
    $path = drupal_get_path('module', $module) . '/templates';
    $registry_entries = drupal_find_theme_templates($theme_registry, '.tpl.php', $path);
    //to avoid error message adding 'type'
    foreach ($registry_entries as $key => $entry) {
        $registry_entries[$key]['type'] = 'module';
        $registry_entries[$key]['theme path'] = $path;
    }
    $theme_registry += $registry_entries;
}

//retrieves path to an artifact relative to its module, so it can be copied in current Drupal instance
function get_relative_artifact($uri, $file_name, $module)
{
    $source = drupal_get_path('module', $module) . '/imports/public/' . substr($uri, 9);

    //handle file name versioning (_0_0...)
    $name_without_ext = substr($file_name, 0, strrpos($file_name, '.'));
    if ($file_name_end = strrpos($source, $name_without_ext)) {
        //aftifact file name is versioned. lets get the root path
        $source = substr($source, 0, $file_name_end) . $file_name;
    }

    //clean double backslashes
    str_replace('/', '//', $source);

    if (!file_exists($source)) {
        watchdog(WATCHDOG_NOTICE, 'Import ' . $module . ': Image does not exists at ' . $source);
    }
    return $source;
}

//strips away versoning for uri
function remove_uri_version($uri, $filename)
{
    $name_without_ext = substr($filename, 0, strrpos($filename, '.'));
    if ($file_name_end = strrpos($uri, $name_without_ext)) {
        return substr($uri, 0, $file_name_end) . $filename;
    } else {
        watchdog(WATCHDOG_NOTICE, 'File name ' . $filename . ' is not part of uri...see remove_uri_version()');
        return $uri;
    }
}

/********Menu********/
function designssquare_lib_menu()
{
    $items['admin/designs-square'] = array(
        'title' => 'DesignsSquare.com',
        'description' => 'Menu system for DesignsSquare.com products.',
        'page callback' => 'register_ds_page',
        'access arguments' => array('access administration pages'),
        'weight' => 50,
//        'access callback' => TRUE,
    );

    return $items;
}

function register_ds_page()
{
    $build = array(
        'header_text' => array(
            '#type' => 'markup',
            '#markup' => '<p class="lead">' . t('DesginsSquare.com Products') . '</p>',
        ),
//        'example_form' => drupal_get_form('fruit_simple_form'),
    );
    return $build;
}

function _module_asset_dir($uri, $mod_name)
{
    $path_tokens = explode('/', $uri);
    array_pop($path_tokens);
    array_shift($path_tokens);
    array_shift($path_tokens); //remove double forward slashes
    $path_mod_relative = implode('/', $path_tokens);
    return drupal_get_path('module', $mod_name) . '/assets/public' . '/' . $path_mod_relative;
}

function _module_asset_full_path($uri, $mod_name)
{
    return _module_asset_dir($uri, $mod_name) . '/' . _get_file_name($uri);
}

function _get_file_name($uri)
{
    $path_tokens = explode('/', $uri);
    $filename = array_pop($path_tokens);
    return $filename;
}

//for JQuery higher of 1.8 include legacy support to avoid errors such as 'msie' of undefined
function include_jquery_legacy_support(&$javascript)
{
    $migrate_js = '';
    if ($jQuery_ver = variable_get('jquery_update_jquery_version', '1.08') > '1.07') {
        //use jquery_updates ui libraries instead the drupal core
        foreach ($javascript as $key => $js_path) {
            $token_path = explode("/", $key);
            $current_js_lib = $token_path[count($token_path) - 1];

            //add legacy support for other modules still using jQuery legacy library
            if ($current_js_lib == 'jquery.min.js' || $current_js_lib == 'jquery.js') {
                $new_path = 'http://code.jquery.com/jquery-migrate-1.2.1.min.js';
                $migrate_js = $js_path;
                $migrate_js['version'] = "1.2.1";
                $migrate_js['data'] = $new_path;
                $migrate_js['weight'] = $js_path['weight'] + 0.01;
                $migrate_js['type'] = 'external';
                $javascript[$new_path] = $migrate_js;
            }
        }
    }

}

//find next node by id with the same content type
function next_node($node){
    //Build query
    $query = new EntityFieldQuery();

   //Only show of specific content type
    $query->entityCondition('bundle', $node->type);
    $query->entityCondition('entity_type', 'node');

    //only show with IDs larger than one
    $query->propertyCondition('nid', $node->nid, '>', 'nid');
    $query->propertyCondition('status', 1);
    $query->propertyOrderBy('nid');

    //Excecute query
    $result = $query->execute();

    $next_project = (isset($result['node'])) ? array_shift($result['node']) : null;
    return (isset($next_project) && isset($next_project->nid)) ? $next_project->nid : null;
}

//find previous node by id with the same content type
function previous_node($node){
    //Build query
    $query = new EntityFieldQuery();

    //Only show of specific content type
    $query->entityCondition('bundle', $node->type);
    $query->entityCondition('entity_type', 'node');

    //only show with IDs larger than one
    $query->propertyCondition('nid', $node->nid, '<', 'nid');
    $query->propertyCondition('status', 1);
    $query->propertyOrderBy('nid');

    //Excecute query
    $result = $query->execute();
    $previous_node = (isset($result['node'])) ? array_pop($result['node']) : null;
    return (isset($previous_node) && isset($previous_node->nid)) ? $previous_node->nid : null;
}


/*********CONTEXTUAL LINKS************/
//generates contextual link for the node
function node_contextual_links($node){
    $contextual_links = contextual_element_info();
    $contextual_links['contextual_links']['#contextual_links'] = array(
        'node' => array('node', array((isset($node->nid)) ? $node->nid : '')),
    );

    return $contextual_links['contextual_links'];
}

//generates contextual links for the view
function view_contextual_links($view){
    //provide contextual links
    $contextual_links = contextual_element_info();
    $contextual_links['contextual_links']['#contextual_links'] = array(
        'views' => array('admin/structure/views/view/'.$view->name, array($view->current_display)),
    );

    return $contextual_links['contextual_links'];
}

/**********Slider*************/
//includes teh FlexSlider JS/CSS Libs and initiates slider with id provided as parameter
function import_flex_slider(&$vars, $num_items_slide, $slider_id = 'flexslider'){
    $slider_tapi = array();
    $slider_tapi["num_slides"] = $num_items_slide + 1;
    $slider_tapi['slider_id'] = $slider_id;
    $vars['slider_tapi'] = $slider_tapi;

    drupal_add_css(drupal_get_path('module', 'designssquare_lib')  .'/libs/FlexSlider/flexslider.css', array('group' => CSS_THEME + 1,'type' => 'file'));
    drupal_add_css(drupal_get_path('module', 'designssquare_lib') .'/libs/FlexSlider/flex-custom.css', array('group' => CSS_THEME + 4,'type' => 'file'));
    drupal_add_js(drupal_get_path('module', 'designssquare_lib') . '/libs/FlexSlider/jquery.flexslider.js', array('scope' => 'header', 'type' => 'file', 'weight' => 4));
    $inline_js = 'jQuery.noConflict()(function ($) {' . "\n";
    $inline_js .= '$(window).load(function() {' . "\n";
    $inline_js .= '    $(\'.'.$slider_id.'\').flexslider({animation: "slide", slideshow: false, controlNav: false, video: true});' . "\n";
    $inline_js .= '});' . "\n";
    $inline_js .= '});' . "\n";
    drupal_add_js($inline_js, array('scope' => 'footer', 'type' => 'inline', 'weight' => 5));
}

//Transfer assets
function export_asset($asset, $mod_name)
{
    $dest_dir = _module_asset_dir($asset['uri'], $mod_name);
    $dest_full_path = _module_asset_full_path($asset['uri'], $mod_name);
    if (!file_exists($dest_full_path)) {
        file_prepare_directory($dest_dir, FILE_CREATE_DIRECTORY);
        file_unmanaged_copy($asset['uri'], $dest_full_path, FILE_EXISTS_REPLACE);
    }
}

//transfers file and adds entry in database if not already present
function transfer_asset($asset, $mod_name, $type)
{
    $source = _module_asset_full_path($asset['uri'], $mod_name);
    $uri = $asset['uri'];

    if (!file_exists($source)) {
        watchdog('designssquare_lib_feature_assets', 'file ' . $source . ' to be imported does not exist in ');
    }

    if (!file_exists($uri)) {
        //ensure dir is present
        $directory = drupal_dirname($uri);
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
        file_unmanaged_copy($source, $uri);
    }

    /*****Save File*****/
    $fid_file = db_select('file_managed', 'n')
        ->fields('n', array('fid', 'uri'))
        ->condition('n.uri', $uri)
        ->execute()
        ->fetchCol();
    if (empty($fid_file)) {
        //no asset with the 'uri' is present
        unset($asset['fid']);
        unset($asset['timestamp']);
        $file_to_save = (object)$asset;
        // Change status to permanent.
        $file_to_save->status = FILE_STATUS_PERMANENT;
        $file_to_save->uri = $uri;

        $final_file = file_save($file_to_save);
        //all permanent files needs an entry in the 'file_usage' table
        file_usage_add($final_file, $mod_name, $type, 1);
        return $final_file->fid;
    } else {
        //file already exist in database
        return $fid_file[0];
    }
}